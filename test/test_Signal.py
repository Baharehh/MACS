#!/usr/bin/env python
# Time-stamp: <2019-12-18 17:02:57 taoliu>

"""Module Description: Test functions for Signal.pyx

This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file LICENSE included with
the distribution).
"""

import unittest

from math import log10
import numpy as np
from MACS2.Signal import maxima, savitzky_golay, savitzky_golay_order2_deriv1

# ------------------------------------
# Main function
# ------------------------------------

class Test_maxima(unittest.TestCase):

    def setUp(self):
        self.signal = np.array( [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 
                                  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
                                  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
                                  5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
                                  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 
                                  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
                                  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 
                                  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
                                  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 
                                  8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
                                  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 
                                  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
                                  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
                                  4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
                                  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
                                  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
                                  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
                                  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
                                  3, 3, 3, 3, 3, 3 ], dtype = "float32" )
        self.windowsize = 253
        self.summit = 161       # this is based on 1-deriv smoothed data
        self.smoothed162 = -2.98155597e-18

    def test_implement_smooth_here ( self ):
        py37numpy117_m=np.array([-9.33677757e-05, -9.26267616e-05, -9.18857475e-05, -9.11447334e-05,
                                -9.04037193e-05, -8.96627052e-05, -8.89216911e-05, -8.81806770e-05,
                                -8.74396629e-05, -8.66986488e-05, -8.59576347e-05, -8.52166206e-05,
                                -8.44756066e-05, -8.37345925e-05, -8.29935784e-05, -8.22525643e-05,
                                -8.15115502e-05, -8.07705361e-05, -8.00295220e-05, -7.92885079e-05,
                                -7.85474938e-05, -7.78064797e-05, -7.70654656e-05, -7.63244515e-05,
                                -7.55834374e-05, -7.48424234e-05, -7.41014093e-05, -7.33603952e-05,
                                -7.26193811e-05, -7.18783670e-05, -7.11373529e-05, -7.03963388e-05,
                                -6.96553247e-05, -6.89143106e-05, -6.81732965e-05, -6.74322824e-05,
                                -6.66912683e-05, -6.59502542e-05, -6.52092401e-05, -6.44682261e-05,
                                -6.37272120e-05, -6.29861979e-05, -6.22451838e-05, -6.15041697e-05,
                                -6.07631556e-05, -6.00221415e-05, -5.92811274e-05, -5.85401133e-05,
                                -5.77990992e-05, -5.70580851e-05, -5.63170710e-05, -5.55760569e-05,
                                -5.48350429e-05, -5.40940288e-05, -5.33530147e-05, -5.26120006e-05,
                                -5.18709865e-05, -5.11299724e-05, -5.03889583e-05, -4.96479442e-05,
                                -4.89069301e-05, -4.81659160e-05, -4.74249019e-05, -4.66838878e-05,
                                -4.59428737e-05, -4.52018596e-05, -4.44608456e-05, -4.37198315e-05,
                                -4.29788174e-05, -4.22378033e-05, -4.14967892e-05, -4.07557751e-05,
                                -4.00147610e-05, -3.92737469e-05, -3.85327328e-05, -3.77917187e-05,
                                -3.70507046e-05, -3.63096905e-05, -3.55686764e-05, -3.48276624e-05,
                                -3.40866483e-05, -3.33456342e-05, -3.26046201e-05, -3.18636060e-05,
                                -3.11225919e-05, -3.03815778e-05, -2.96405637e-05, -2.88995496e-05,
                                -2.81585355e-05, -2.74175214e-05, -2.66765073e-05, -2.59354932e-05,
                                -2.51944791e-05, -2.44534651e-05, -2.37124510e-05, -2.29714369e-05,
                                -2.22304228e-05, -2.14894087e-05, -2.07483946e-05, -2.00073805e-05,
                                -1.92663664e-05, -1.85253523e-05, -1.77843382e-05, -1.70433241e-05,
                                -1.63023100e-05, -1.55612959e-05, -1.48202819e-05, -1.40792678e-05,
                                -1.33382537e-05, -1.25972396e-05, -1.18562255e-05, -1.11152114e-05,
                                -1.03741973e-05, -9.63318320e-06, -8.89216911e-06, -8.15115502e-06,
                                -7.41014093e-06, -6.66912683e-06, -5.92811274e-06, -5.18709865e-06,
                                -4.44608456e-06, -3.70507046e-06, -2.96405637e-06, -2.22304228e-06,
                                -1.48202819e-06, -7.41014093e-07, -5.38965524e-21,  7.41014093e-07,
                                1.48202819e-06,  2.22304228e-06,  2.96405637e-06,  3.70507046e-06,
                                4.44608456e-06,  5.18709865e-06,  5.92811274e-06,  6.66912683e-06,
                                7.41014093e-06,  8.15115502e-06,  8.89216911e-06,  9.63318320e-06,
                                1.03741973e-05,  1.11152114e-05,  1.18562255e-05,  1.25972396e-05,
                                1.33382537e-05,  1.40792678e-05,  1.48202819e-05,  1.55612959e-05,
                                1.63023100e-05,  1.70433241e-05,  1.77843382e-05,  1.85253523e-05,
                                1.92663664e-05,  2.00073805e-05,  2.07483946e-05,  2.14894087e-05,
                                2.22304228e-05,  2.29714369e-05,  2.37124510e-05,  2.44534651e-05,
                                2.51944791e-05,  2.59354932e-05,  2.66765073e-05,  2.74175214e-05,
                                2.81585355e-05,  2.88995496e-05,  2.96405637e-05,  3.03815778e-05,
                                3.11225919e-05,  3.18636060e-05,  3.26046201e-05,  3.33456342e-05,
                                3.40866483e-05,  3.48276624e-05,  3.55686764e-05,  3.63096905e-05,
                                3.70507046e-05,  3.77917187e-05,  3.85327328e-05,  3.92737469e-05,
                                4.00147610e-05,  4.07557751e-05,  4.14967892e-05,  4.22378033e-05,
                                4.29788174e-05,  4.37198315e-05,  4.44608456e-05,  4.52018596e-05,
                                4.59428737e-05,  4.66838878e-05,  4.74249019e-05,  4.81659160e-05,
                                4.89069301e-05,  4.96479442e-05,  5.03889583e-05,  5.11299724e-05,
                                5.18709865e-05,  5.26120006e-05,  5.33530147e-05,  5.40940288e-05,
                                5.48350429e-05,  5.55760569e-05,  5.63170710e-05,  5.70580851e-05,
                                5.77990992e-05,  5.85401133e-05,  5.92811274e-05,  6.00221415e-05,
                                6.07631556e-05,  6.15041697e-05,  6.22451838e-05,  6.29861979e-05,
                                6.37272120e-05,  6.44682261e-05,  6.52092401e-05,  6.59502542e-05,
                                6.66912683e-05,  6.74322824e-05,  6.81732965e-05,  6.89143106e-05,
                                6.96553247e-05,  7.03963388e-05,  7.11373529e-05,  7.18783670e-05,
                                7.26193811e-05,  7.33603952e-05,  7.41014093e-05,  7.48424234e-05,
                                7.55834374e-05,  7.63244515e-05,  7.70654656e-05,  7.78064797e-05,
                                7.85474938e-05,  7.92885079e-05,  8.00295220e-05,  8.07705361e-05,
                                8.15115502e-05,  8.22525643e-05,  8.29935784e-05,  8.37345925e-05,
                                8.44756066e-05,  8.52166206e-05,  8.59576347e-05,  8.66986488e-05,
                                8.74396629e-05,  8.81806770e-05,  8.89216911e-05,  8.96627052e-05,
                                9.04037193e-05,  9.11447334e-05,  9.18857475e-05,  9.26267616e-05,
                                9.33677757e-05])

        signal = self.signal
        window_size = self.windowsize
        half_window = (window_size - 1) // 2
        # precompute coefficients
        b = np.array([[1, k, k**2] for k in range(-half_window, half_window+1)], dtype='int64')
        m = np.linalg.pinv(b)[1]
        # pad the signal at the extremes with
        # values taken from the signal itself
        firstvals = signal[0] - np.abs(signal[1:half_window+1][::-1] - signal[0])
        lastvals = signal[-1] + np.abs(signal[-half_window-1:-1][::-1] - signal[-1])
        signal = np.concatenate((firstvals, signal, lastvals))
        print ( "left padding:\n", firstvals )
        print ( "right padding:\n", lastvals )
        self.assertEqual_nparray1d( m, py37numpy117_m, places = 10 )
        ret = np.convolve( m[::-1], signal.astype("float64"), mode='valid').astype("float32")
        p = ret[162]
        print ("calculated step by step:\n", p)
        print ("expected:\n", self.smoothed162)
        self.assertAlmostEqual( p, self.smoothed162, places = 4 )
        self.assertEqual( np.sign(p), np.sign(self.smoothed162) )
        #self.assertEqual( 1, 2 )

    def test_maxima(self):
        expect = self.summit
        result = maxima( self.signal, self.windowsize )[0]
        self.assertEqual( result, expect, msg=f"Not equal: result: {result}, expected: {expect}" )

    def assertEqual_nparray1d ( self, a, b, places = 7 ):
        self.assertEqual( a.shape[0], b.shape[0] )
        l = a.shape[0]
        for i in range( l ):
            self.assertAlmostEqual( a[i], b[i], places = places, msg=f"Not equal at {i} {a[i]} {b[i]}" )
            
